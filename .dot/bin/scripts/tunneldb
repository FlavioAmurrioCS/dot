#!/usr/bin/env bash

# shellcheck source=../scripts/__script_utilities.sh
SCRIPT_HOME="$(dirname "$(cd "$(dirname "${0}")" >/dev/null 2>&1 && pwd -P)")/scripts" &&
  [ -f "${SCRIPT_HOME}/__script_utilities.sh" ] &&
  source "${SCRIPT_HOME}/__script_utilities.sh"

# TODO: Verify db host!
dbHostList="\

"

function tunneldb() {
  help_arg_count_usage 0 "${FUNCNAME[0]:-tunneldb} [hostname] [remote_port] [local_port]" "$@" && return 0

  local host
  local remote_port
  local local_port

  host=${1:-$(echo "${dbHostList}" | select_one)} || return 1
  log_info "Target Host: ${host}"
  # host=${1:-$(s -p)} || return 1
  log_info -n "Verifying connections to '${host}'... " &&
    ! ssh "${ssh_options[@]}" "${host}" 'exit 0' &&
    log_error "FAILED" &&
    return 1
  log_info "OK"

  ! remote_port=${2:-$(
    log_info -n "Retrieving port from tnsnames.ora on host..."
    ssh "${ssh_options[@]}" "${host}" 'grep PORT /app/oracle/product/**/db/network/admin/tnsnames.ora' | tr -d ' ' | grep -oE "PORT=[0-9]+" | sort -u | grep -oE -m 1 '[0-9]{4,6}' && log_info "OK"
  )} &&
    log_warning "FAILED" &&
    return 1
  log_info "Target remote port: ${remote_port}"

  local_port=${3:-${remote_port}}
  log_info "Target local port: ${local_port}"

  # # shellcheck disable=SC2029
  # ! ssh "${ssh_options[@]}" "${host}" "sudo lsof -i ':${port}' 2>/dev/null | grep -q LISTEN" &&
  #   log_error "'${host}' doesn't seem to have db running on port '${port}'." &&
  #   return 1

  local inUse
  if ! inUse=$(port "${local_port}" 2>/dev/null); then
    if echo "${inUse}" | grep -v "${host}" | grep -q ssh; then
      log_warning "Seems like another process/tunnel is using port ${local_port}. Killing all of them."
      port "${local_port}" -k >/dev/null 2>&1
    else
      log_info "Seems like there is a tunnel already for '${host}:${remote_port}' mapped to 'localhost:${local_port}'"
      return 0
    fi
  fi

  append_to_history_no_exec tunneldb "${host}" "${remote_port}" "${local_port}"
  log_info -n "Attempting to tunnel... "
  {
    # ssh "${ssh_options[@]}" -N -f -L "${local_port}:127.0.0.1:${remote_port}" "${host}" &&
    ssh "${ssh_options[@]}" -N -f -L "${local_port}:${host}:${remote_port}" "${host}" &&
      ! port "${local_port}" >/dev/null 2>&1 &&
      log_success "DB tunnel opened from ${host}:${remote_port} to localhost:${local_port}"
  } ||
    log_error "Tunnel did not stay up.\nManually run 'ssh -vvvv -N -f -L ${local_port}:${host}:${remote_port} ${host}' to diagnose."
}

tunneldb "${@}"
