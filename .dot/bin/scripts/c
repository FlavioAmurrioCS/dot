#!/usr/bin/env bash

# shellcheck source=../scripts/__script_utilities.sh
SCRIPT_HOME="$(dirname "$(cd "$(dirname "${0}")" >/dev/null 2>&1 && pwd -P)")/scripts" &&
  [ -f "${SCRIPT_HOME}/__script_utilities.sh" ] &&
  source "${SCRIPT_HOME}/__script_utilities.sh"

export VSCODE_EXTENSION_FILE="${VSCODE_EXTENSION_FILE:-${SCRIPT_HOME}/../../.vscode/extensions.json}"
export EXTENSION_CACHE="${EXTENSION_CACHE:-${HOME}/.extension-cache}"

function __listLocalProjects() {
  find "${HOME}/projects" -maxdepth 1 -type d -follow | grep -v "${HOME}/projects$"
}

function __listRemoteProjects() {
  local host="${1}"

  # shellcheck disable=SC2016
  local remote_command='
  remote_projects_home="$(readlink -f ~)/projects"
  [ ! -d "${remote_projects_home}" ] && mkdir -p "${remote_projects_home}"
  find "${remote_projects_home}" -maxdepth 1 -type d -follow | grep -v "${remote_projects_home}$"'

  # shellcheck disable=SC2029
  ssh "${ssh_options[@]}" -q "${host}" "${remote_command}"
}

function __listLocalAndGitProjects() {
  local project
  project="$({
    __listLocalProjects &
    [ "${git_project_selection}" = true ] && __listGitProjects &
  } | select_one)" || return 1
  if [[ "${project}" = *.git ]]; then
    project="$(__localGitClone "${project}")"
  fi
  echo "${project}"
}

function __listRemoteAndGitProjects() {
  local host="${1}"

  local project
  project="$({
    __listRemoteProjects "${host}" &
    [ "${git_project_selection}" = true ] && __listGitProjects &
  } | select_one)" || return 1

  if [[ ${project} = *.git ]]; then
    project="$(__remoteGitClone "${host}" "${project}")"
  fi
  echo "${project}"
}

# Takes in extension id and it will download the latest.
function __downloadExtensionToLocal() {
  help_arg_count_usage 1 "${FUNCNAME[0]} <extension-id>" "$@" && return 0
  local extension_id="${1}"
  extension_id="$(echo "${extension_id}" | tr '[:upper:]' '[:lower:]')"
  local publisher
  local extension_name
  local version
  read -r publisher extension_name <<<"${extension_id//./ }"
  local extension_web_url="https://marketplace.visualstudio.com/items?itemName=${extension_id}"
  version=$(curl --connect-timeout 5 -s "${extension_web_url}" | tr ',{' '\n' | grep -e VersionValue | cut -d '"' -f4)
  local extension_download_url="https://${publisher}.gallery.vsassets.io/_apis/public/gallery/publisher/${publisher}/extension/${extension_name}/${version}/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage"
  mkdir -p "${EXTENSION_CACHE}" && cd "${EXTENSION_CACHE}" || return 0
  if [ -f "./${extension_id}-${version}.vsix" ]; then
    log_success "${extension_id}-${version}.vsix is already downloaded."
  else
    rm -rf ./"${extension_id}"/*.vsix # Removing Old Version
    log_warning -n "Downloading ${extension_id}-${version}.vsix..." &&
      curl --connect-timeout 5 -s "${extension_download_url}" -o "${extension_id}-${version}.vsix" &&
      log_success "Done."
  fi
}

function __downloadExtensionJsonToLocal() {
  help_arg_count_usage 1 "${FUNCNAME[0]} <extension.json>" "$@" && return 0
  # TODO: Fix Cache Check
  # shellcheck disable=SC2012
  # wasFileModifiedToday "$(ls -ltr "${EXTENSION_CACHE}" | tail -n 1 | rev | awk '{print $2,$3,$4}' | rev)" &&
  #   log_info "Extension cache is still fresh!" &&
  #   return 0
  local ext_file="${1}"
  [ ! -f "${ext_file}" ] && log_error "Invalid extension.json file: '${ext_file}'" && return 1
  local extension_list_cmd="import json
for a in json.load(open('${ext_file}', 'r'))['recommendations']:
  print(a)"
  local extension
  for extension in $(python -c "${extension_list_cmd}"); do
    __downloadExtensionToLocal "${extension}"
  done
}

function __syncCacheToRemote() {
  help_arg_count_usage 1 "${FUNCNAME[0]} <host>" "$@" && return 0
  local host="${1}"
  log_warning -n "Syncing extension cache..." &&
    rsync -r "${EXTENSION_CACHE}" "${host}":~/ --delete &&
    log_success "Done."
}

# THIS WILL INSTALL EXTENSION FROM CACHE LOCALLY
function __installExtensionFromCacheLocal() {
  local extension_cache="${HOME}/.extension-cache"
  local extensions_home="${HOME}/.vscode/extensions"
  uname -s | grep -q Linux && extensions_home="${HOME}/.vscode-server/extensions"
  mkdir -p "${extensions_home}" || return 1
  local extension_name
  cd "${extension_cache}" || return 1
  for extension_name in $(find . -name "*.vsix" | sed -e 's|.vsix||g' -e 's|./||g'); do
    local extension_name_lower
    extension_name_lower="$(echo "${extension_name}" | tr '[:upper:]' '[:lower:]')"
    if [ ! -d "${extensions_home}/${extension_name}" ]; then
      log_warning -n "Installing ${extension_name}..." &&
        unzip -qq "${extension_name}.vsix" >/dev/null 1>&2 &&
        mv ./extension "${extensions_home}/${extension_name_lower}" &&
        log_success "Done."
    fi
    rm -rf ./*.xml extension.vsixmanifest
  done
  cd - >/dev/null 2>&1 || true
}

function c() {
  local host="${DEV_HOST:-${USER}.BLANK}"

  local USAGE="
  USAGE: ${FUNCNAME[0]:-c} [options...] [path]

  To read from stdin, append '-' (e.g. 'ps aux | grep code | c -')

  Options:
    -l --local-development  Activate local development mode.
    -h --host <host_name>   Overide default DEV_HOST.
    -r --reuse-window       Reuse currently active window.
    -e --installExtensions  Install extension from \$VSCODE_EXTENSION_FILE:${VSCODE_EXTENSION_FILE}.
    -g --git-project        Show git project selection. Will clone if project is not found.
    --help                  Show usage.

  - Open interactive folder selection for default remote host (\$DEV_HOST:${host}).
    c
"
  local local_development=false
  export git_project_selection=false
  local opts=()
  local project=""
  local installExtension=false

  # TODO: Add options to open with git url(clone and open)
  # TODO: Add the options to pass in org/user got git api
  # TODO: Interactive host selection for previous connections
  while [[ "${1}" =~ ^- && ! "${1}" == "--" ]]; do
    case ${1} in
    -l | --local-development)
      local_development="true"
      ;;
    -h | --host)
      shift
      host=${1}
      ;;
    -i | -vdi)
      host=""
      ;;
    -ij | -ijump)
      host=""
      ;;
    -bj | -bjump)
      host=""
      ;;
    -vde)
      host="${USER}.BLANK"
      ;;
    -g | --git-project)
      export git_project_selection="true"
      ;;
    -)
      code - &
      return 0
      ;;
    -e | --installExtensions)
      installExtension=true
      ;;
    --help)
      echo "${USAGE}" && return 0
      ;;
    -r)
      opts+=("${1}")
      ;;
    *)
      echo "YOU ARE NOT SUPPOSE TO GET HERE!!!" && return 0
      ;;
    esac
    shift
  done
  if [[ "$1" == '--' ]]; then shift; fi

  [[ "${local_development}" != true ]] && log_info "Working on ${host}"

  if [[ "${installExtension}" == true ]]; then
    { canConnect "https://marketplace.visualstudio.com/items" 2>/dev/null && __downloadExtensionJsonToLocal "${VSCODE_EXTENSION_FILE}"; } || log_warning "Using local cache only."
    if [[ "${local_development}" == true ]]; then
      log_warning "Extension installation begins." &&
        __installExtensionFromCacheLocal &&
        log_success "Extension installation ends."
    else
      __syncCacheToRemote "${host}"
      ssh "${ssh_options[@]}" -q "${host}" 'c --local-development --installExtensions'
    fi
    return 0
  fi

  local target="${1}"

  # If one argument is passed in, will try to open the folder/file locally or remotely
  if [ -n "${target}" ]; then
    if [ "${local_development}" = true ]; then
      append_to_history code "${target}" "${opts[@]}" && return 0
    else
      target="${target//${HOME}/\$HOME}"
      # TODO: Interactive folder/file selection
      read -r target file_type <<<"$(ssh "${ssh_options[@]}" -q "${host}" 'temp="'"${target}"'"; echo "${temp} $(file ${temp})"')" || {
        log_error "Cannot connect to host: ${host}." && return 1
      }
      case "${file_type}" in
      *"cannot open"*)
        log_error "${file_type}" && return 1
        ;;
      *"directory")
        append_to_history code "${opts[@]}" --folder-uri "vscode-remote://ssh-remote+${host}${target}" && return 0
        ;;
      *)
        append_to_history code "${opts[@]}" --file-uri "vscode-remote://ssh-remote+${host}${target}" && return 0
        ;;
      esac
    fi
  fi

  local dest
  if [ "${local_development}" = true ]; then
    dest="$(__listLocalAndGitProjects)" || return 1
    append_to_history code "${dest}" "${opts[@]}" && return 0
  else
    dest="$(__listRemoteAndGitProjects "${host}")" || return 1
    append_to_history code "${opts[@]}" --folder-uri "vscode-remote://ssh-remote+${host}${dest}" && return 0
  fi
}

c "${@}"
