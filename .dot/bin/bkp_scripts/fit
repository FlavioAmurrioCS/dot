#!/usr/bin/env bash
# author: Flavio Amurrio

# TODO: Run Headless
# TODO: Include file watch for junit
# TODO: Find better way of doing this check
if ! hostname | grep -iq fit; then
  "${HOME}/.dot/bin/darwin/fit" "$@"
  exit
fi


# shellcheck source=./__script_utilities.sh
SCRIPT_HOME="$(dirname "$(cd "$(dirname "${0}")" >/dev/null 2>&1 && pwd -P)")/scripts" &&
  [ -f "${SCRIPT_HOME}/__script_utilities.sh" ] &&
  source "${SCRIPT_HOME}/__script_utilities.sh"

function color_log() {
  local color=${1} && shift
  local options="-e"
  [[ "${1}" == "-n" ]] && options+="n" && shift
  echo "${options}" "${color}${*}\033[0m" 1>&2
}
function log_info() { color_log '\033[1;37m' "${@}"; }
function log_error() { color_log '\033[1;31m' "${@}"; }
function log_success() { color_log '\033[1;32m' "${@}"; }
function log_warning() { color_log '\033[1;33m' "${@}"; }


# TODO: Make this stable for mac
[[ "$(uname -s)" == *arwin* ]] && log_error "THIS IS NOT STABLE FOR MAC." && exit 1

# shellcheck disable=SC2120
[[ "$(uname -s)" == *arwin* ]] && function md5sum() { cat | md5 "${@}"; } # Overide 'md5sum' since is not available in mac.
[[ "$(uname -s)" == *arwin* ]] && function sudo() { "${@}"; }             # Overide 'sudo' since is not available in mac.

HASH_NUM="$(echo "${USER}${HOSTNAME}" | md5sum | tr 'abcdef0-' ' ' | tr -d ' ' | grep -o ".........$")"

# NOTE: THIS SCRIPT HASHES '$USER' and generate a default port for the user
# THIS CAN BE OVERIDDEN BY DEFINING FIT_PORT, FIT_DEBUG_PORT, FIT_XVFB_SCREEN in your ~/.bashrc
# 0-1023        Privileged Ports
# 1024-49,151   Registered Ports
# 49,152-65,535 Dynamic(Private) Ports

DEFAULT_PORT=$((HASH_NUM % 64511 + 1023))
DEFAULT_DEBUG_PORT=$((HASH_NUM % 64511 + 1024))
DEFAULT_XVFB_SCREEN=$((HASH_NUM % 99 + 1))

PORT=${FIT_PORT:-${DEFAULT_PORT}}
PORT_DEBUG=${FIT_DEBUG_PORT:-${DEFAULT_DEBUG_PORT}}
XVFB_SCREEN=${FIT_XVFB_SCREEN:-${DEFAULT_XVFB_SCREEN}}

HOME_DIR="/app/${USER}"
[[ "$(uname -s)" == *arwin* ]] && HOME_DIR="${HOME}/projects" # Since we have no access to /app on mac
VFITNESSE_DIR="${HOME_DIR}/vfitnesse"
CTLD_TESTS_DIR="${HOME_DIR}/ctld-tests"
TESTS_DIR="${HOME_DIR}/ctld-tests/source"
PID=$(ps aux | grep fitnesse | grep "${USER}" | grep java | grep -v grep | awk '{print $2}')
SCRIPT_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

USAGE="USAGE: fit <start|stop|status|restart|ports|pull|checkout>

Options
    start     Start fitnesse server on port ${PORT} (Includes setup).
    stop      Stop fitnesse server running on port ${PORT}.
    status    Status of fitnesse server for ${USER}.
    restart   Stop, recompile and start fitnesse (Includes setup).
    ports     Display the ports for fitness.
    pull      Update the current branches for vfitness, ctld-tests and vscode_setup.
    checkout  Change branches for vfitness and ctld-test.

NOTE: This script hashes the \$USER ($USER) and generates a default PORT=${PORT}, DEBUG_PORT=${PORT_DEBUG} and XVFB_SCREEN=${XVFB_SCREEN}.
      This can be overriden by defining 'FIT_PORT', 'FIT_DEBUG_PORT' and 'FIT_XVFB_SCREEN' in your ~/.bashrc.
"

function setup() {
  ! command -v git >/dev/null 2>&1 &&
    ssh-keyscan BLANK >>"${HOME}/.ssh/known_hosts" 2>/dev/null &&
    sudo yum install -y git vim java-1.8.0-openjdk-devel tmux
  [ ! -d "${HOME_DIR}" ] &&
    sudo mkdir -p "${HOME_DIR}" &&
    sudo chown -R "${USER}:${USER}" "${HOME_DIR}" &&
    ln -sfn "${HOME_DIR}" "${HOME}/projects"
  if [ ! -d "${TESTS_DIR}" ]; then
    cd "${HOME_DIR}" && true
    git clone git@BLANK:ctld/ctld-tests.git --recursive
    cd - >/dev/null 2>&1 || true
  fi
  if [ ! -d "${VFITNESSE_DIR}" ]; then
    cd "${HOME_DIR}" && true
    git clone -b ctld-master git@BLANK:vfitnesse/vfitnesse.git --recursive
    cd - >/dev/null 2>&1 || true
    cd "${VFITNESSE_DIR}/source" || true
    ./gradlew clean
    ./gradlew assemble -i
    cd - >/dev/null 2>&1 || true
  fi
  # TODO: Switch to .dot files.
  if [ ! -d "${HOME_DIR}/vscode_setup" ]; then
    cd "${HOME_DIR}" || true
    git clone git@BLANK:famurriomoya/vscode_setup.git --recursive
    [ -f "${HOME}/.bashrc" ] &&
      bashrc_bak_file="${HOME}/.bashrc.$(date +"%Y_%m_%d_%H_%M_%S")" &&
      log_warning "Backing up ${HOME}/.bashrc as ${bashrc_bak_file} and putting in new one." &&
      mv "${HOME}/.bashrc" "${bashrc_bak_file}"
    cp "${HOME_DIR}/vscode_setup/bashrc" "${HOME}/.bashrc"
    log_warning "Source your ~/.bashrc."
    cd - >/dev/null 2>&1 || true
  fi
  ! command -v fzf >/dev/null 2>&1 &&
    [ -x "${HOME_DIR}/vscode_setup/bin/linux/fzf" ] &&
    sudo install "${HOME_DIR}/vscode_setup/bin/linux/fzf" /usr/bin
}

function start() {
  setup
  if [ -z "${PID}" ]; then
    log_warning "Starting server on http://localhost:${PORT}"
    VFITNESSE_BRANCH="$(git "--git-dir=${VFITNESSE_DIR}/.git" "--work-tree=${VFITNESSE_DIR}" branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
    TESTS_BRANCH="$(git "--git-dir=${CTLD_TESTS_DIR}/.git" "--work-tree=${CTLD_TESTS_DIR}" branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
    log_success "VFITNESS  : ${VFITNESSE_BRANCH}"
    log_success "CTLD-TEST : ${TESTS_BRANCH}"
    cd "${HOME_DIR}" || true
    nohup "${HOME_DIR}/vfitnesse/source/fitnesse/fitnesseWiki/startServer.sh" \
      -p "${PORT}" \
      -debugPort "${PORT_DEBUG}" \
      -xvfbScreenNum "${XVFB_SCREEN}" \
      -d "${TESTS_DIR}" &
  else
    status
  fi
  cd - >/dev/null 2>&1 || true
}

function stop() {
  if [ -n "${PID}" ]; then
    kill -9 "${PID}" && log_success "Killed server running on PORT=${PORT}."
  else
    log_warning "Server is not running!"
  fi
}

function status() {
  setup
  if [ -n "${PID}" ]; then
    log_success "Server is running on PORT=${PORT}, DEBUG_PORT=${PORT_DEBUG} and XVFB_SCREEN=${XVFB_SCREEN}. (http://localhost:${PORT})"
  else
    log_warning "Server is not running!"
  fi
  VFITNESSE_BRANCH="$(git "--git-dir=${VFITNESSE_DIR}/.git" "--work-tree=${VFITNESSE_DIR}" branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
  TESTS_BRANCH="$(git "--git-dir=${CTLD_TESTS_DIR}/.git" "--work-tree=${CTLD_TESTS_DIR}" branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
  log_success "VFITNESS  : ${VFITNESSE_BRANCH}"
  log_success "CTLD-TEST : ${TESTS_BRANCH}"
}

function restart() {
  setup
  stop
  cd "${VFITNESSE_DIR}/source" || true
  ./gradlew clean
  ./gradlew assemble -i
  PID=""
  start
  cd - >/dev/null 2>&1 || true
}

function fgco() {
  export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --exact"
  ! [ -x "$(command -v fzf)" ] && echo 'Error: fzf is not in PATH.' >&2 && exit 1
  select_branch=$(git branch -a | sed "s|remotes/origin/||g" | grep -v ">" | tr "*" " " | sort -u | grep -E "[a-z]{1,4}" | sed 's|^ *||' | fzf)
  [ -z "$select_branch" ] && log_warning "No branch selected" && exit 1
  git checkout "$select_branch"
}

function checkout() {
  setup
  cd "${VFITNESSE_DIR}" &&
    log_warning "Select branch for $(basename "$(pwd)")" &&
    fgco
  cd - >/dev/null 2>&1 || true
  cd "${CTLD_TESTS_DIR}" &&
    log_warning "Select branch for $(basename "$(pwd)")" &&
    fgco
  cd - >/dev/null 2>&1 || true
  status
  log_warning "Run 'fit restart'"
}

function pull() {
  setup
  git "--git-dir=${VFITNESSE_DIR}/.git" "--work-tree=${VFITNESSE_DIR}" pull
  git "--git-dir=${CTLD_TESTS_DIR}/.git" "--work-tree=${CTLD_TESTS_DIR}" pull
  git "--git-dir=${HOME_DIR}/vscode_setup/.git" "--work-tree=${HOME_DIR}/vscode_setup" pull
  status
}

case $1 in
start | stop | status | restart | setup | pull | checkout)
  "${1}"
  ;;
install)
  { [[ "$(uname -s)" == *inux* ]] && sudo install "${BASH_SOURCE[0]}" /usr/bin && log_success "Installed fit to /usr/bin."; } ||
    log_error "Install is only available on Linux."
  ;;
ports)
  echo "${PORT} ${PORT_DEBUG} ${XVFB_SCREEN}"
  ;;
*)
  log_success "${USAGE}"
  ;;
esac
