#!/usr/bin/env bash
#!/bin/bash -x

find_args=(
  -maxdepth 6
  -type f
  -name eclipse
  -follow
)

uname -s | grep -qi Darwin && function findEclipse() { find /Applications "${HOME}/.sw" "${find_args[@]}" -perm +111 2>/dev/null; }

uname -s | grep -qi Linux && function findEclipse() { find /opt "$(cd /app 2>/dev/null && pwd -P)" "${HOME}" "${find_args[@]}" -executable 2>/dev/null; }

function color_log() {
  local color=${1} && shift
  local options="-e"
  [[ "${1}" == "-n" ]] && options+="n" && shift
  echo "${options}" "${color}${*}\033[0m" 1>&2
}
function log_info() { color_log '\033[1;37m' "${@}"; }
function log_error() { color_log '\033[1;31m' "${@}"; }
function log_success() { color_log '\033[1;32m' "${@}"; }
function log_warning() { color_log '\033[1;33m' "${@}"; }

function fformat() {
  local USAGE="
  USAGE: ${FUNCNAME[0]:-fformat} <--diff|--diff=<base_branch>|files...>

  Options:
    --diff                  Be used inside git project. Format files that have not been committed.
    --diff=<base_branch>    Be used inside git project. Format files that have change since the base_branch.
    --help                  Show usage.

  ECLIPSE_EXECUTABLE
  ECLIPSE_FORMATTER_XML
"

  local eclipse_exe="${ECLIPSE_EXECUTABLE:-"/Applications/Eclipse.app/Contents/MacOS/eclipse"}"
  local eclipse_formatter_xml="${ECLIPSE_FORMATTER_XML:-"${HOME}/projects/coding-standards/java/EclipseFormatter.xml"}"
  local eclipse_formatter_ini="${HOME}/.fmt.ini"
  local tmp_workspace
  local diff_files=()
  local files_to_format=()
  local base_branch

  while [[ "${1}" =~ ^- && ! "${1}" == "--" ]]; do
    [ ${#diff_files[@]} -gt 0 ] && log_warning "Use only one flag or just a list of files." && return 1
    case ${1} in
    --diff)
      ! git status >/dev/null 2>&1 && log_error "Not inside a valid git project" && return 1
      while IFS='' read -r line; do diff_files+=("${line}"); done < <(git diff --name-only "--line-prefix=$(git rev-parse --show-toplevel)/")
      ;;
    --diff=*)
      ! git status >/dev/null 2>&1 && log_error "Not inside a valid git project" && return 1
      base_branch=$(echo "${1}" | cut -d'=' -f2)
      ! git rev-parse --verify "${base_branch}" >/dev/null 2>&1 &&
        log_error "Branch does not exist '${base_branch}'." &&
        return 1
      while IFS='' read -r line; do diff_files+=("${line}"); done < <(git diff "${base_branch}" --name-only "--line-prefix=$(git rev-parse --show-toplevel)/")
      ;;
    --help)
      log_info "${USAGE}" && return 0
      ;;
    *)
      log_warning "Invalid Flag '${1}'" && return 0
      ;;
    esac
    shift
  done
  if [[ "$1" == '--' ]]; then shift; fi

  for file in "${diff_files[@]}"; do
    [[ "${file}" =~ .java$ ]] && [ -f "${file}" ] && files_to_format+=("${file}")
  done

  if [ $# -gt 0 ]; then
    [ ${#files_to_format[@]} -gt 0 ] && log_warning "Use only one flag or just a list of files." && return 1
    for file in "$@"; do
      files_to_format+=("$(cd "$(dirname "${file}")" && pwd -P)/$(basename "${file}")")
    done
  fi

  [ ${#files_to_format[@]} -lt 1 ] && log_warning "No files to format." && return 1

  [ ! -x "${eclipse_exe}" ] && eclipse_exe="$(findEclipse | grep -iv -e cpp | head -n 1)"
  [ ! -x "${eclipse_exe}" ] && log_warning "Invalid eclipse executable. Install from self-service/yum." && return 1

  [ ! -f "${eclipse_formatter_xml}" ] &&
    log_warning "Formatter file not found. Attemping to clone coding-standards into ~/projects" &&
    git clone git@BLANK:Standards/coding-standards.git "${HOME}/projects/coding-standards" --recursive &&
    eclipse_formatter_xml="${HOME}/projects/coding-standards/java/EclipseFormatter.xml"
  [ ! -f "${eclipse_formatter_xml}" ] && return 1

  tmp_workspace="$(mktemp -d)"

  grep -oE 'org.eclipse.jdt.core.formatter..*"' "${eclipse_formatter_xml}" |
    sed -e 's|" value="|=|g' -e 's|"||g' >"${eclipse_formatter_ini}"

  log_info "eclipse_exe:            ${eclipse_exe}"
  log_info "eclipse_formatter_xml:  ${eclipse_formatter_xml}"

  log_file=$(mktemp)

  log_warning -n "Formatting..."

  if "${eclipse_exe}" \
    -data "${tmp_workspace}" \
    -application org.eclipse.jdt.core.JavaCodeFormatter \
    -config "${eclipse_formatter_ini}" "${files_to_format[@]}" 2>&1 | tee "${log_file}" | grep "^Done.$" -q; then
    log_success "DONE"
  else
    log_error "FAILED. Printing out logs." && cat "${log_file}"
  fi

  rm -rf "${eclipse_formatter_ini}" "${tmp_workspace}" "${log_file}"
}

fformat "$@"
