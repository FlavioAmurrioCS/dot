#!/usr/bin/env python

import sys
import json
from argparse import ArgumentParser

ERROR_CODE = 1
SUCCESS_CODE = 0

object_hook = None


if sys.version_info < (3, 0):  # noqa: C901

    def _byteify(data, ignore_dicts=False):
        """
        This is need for python2 due to PYTHONIOENCODING.
        """
        if isinstance(data, unicode):
            return data.encode("utf-8")
        if isinstance(data, list):
            return [_byteify(item, ignore_dicts=True) for item in data]
        if isinstance(data, dict) and not ignore_dicts:
            return {
                _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)
                for key, value in data.iteritems()
            }
        return data

    object_hook = _byteify


def load_json(filename):
    # type: (str) -> object
    f = sys.stdin if not filename else open(filename, "r")
    return json.load(f, object_hook=object_hook)


def json_traversal(obj, path):
    # type: (object) -> object
    if not path:
        return obj
    if not isinstance(obj, (list, dict, tuple)):
        raise KeyError
    current_key, remaining_keys = path[0], path[1:]
    current_key = int(current_key) if isinstance(obj, (list, tuple)) else current_key
    return json_traversal(obj[current_key], remaining_keys)


def parse_path(json_path):
    # type: (str) -> list[str]
    path = json_path.strip()
    if len(path) == 0:
        return []
    delimeter = "][" if path[0] == "[" and path[-1] == "]" else "."
    return [s.strip() for s in path.strip("[]").split(delimeter) if s]


def iterobj(obj):  # noqa: C901
    # type:(any) -> (str, any)
    if isinstance(obj, list):
        for i in (o for o in obj if isinstance(o, (list, tuple, dict))):
            for k, v in iterobj(i):
                yield (k, v)
    if isinstance(obj, dict):
        for k, v in obj.items():
            yield (k, v)
            if isinstance(v, (list, tuple, dict)):
                for key, value in iterobj(v):
                    yield (key, value)


def parse_args(argv):
    desc = (
        "This tool can pretty print json, retrieve item via json_path or search by key."
    )
    parser = ArgumentParser(description=desc)
    parser.add_argument("-f", "--file")
    parser.add_argument("-p", "--json_path", default="")
    parser.add_argument("-s", "--search_key")
    return parser.parse_args(argv)


def search_obj(obj, search_key):
    # type:(any,str) -> list[(str, any)]
    search_key = search_key.lower()
    return [{k: v} for k, v in iterobj(obj) if search_key in k.lower() and v]


def main(argv=None):
    # type:(list) -> int
    args = parse_args(argv)

    json_obj = load_json(args.file)  # type: object
    json_path = parse_path(args.json_path)  # type: list
    search_key = args.search_key  # type: str

    # MAYBE?
    if (
        isinstance(json_obj, list)
        and len(json_obj) == 1
        and len(json_path)
        and json_path != "0"
    ):
        json_obj = json_obj[0]

    output = json_traversal(json_obj, json_path)

    if search_key:
        output = search_obj(output, search_key)

    json.dump(output, sys.stdout, sort_keys=True, indent=4, separators=(",", ": "))
    print("")


if __name__ == "__main__":
    exit(main())
