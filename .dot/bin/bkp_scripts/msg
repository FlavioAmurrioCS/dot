#!/usr/bin/env bash

function msg() {
  local usage="usage: ${FUNCNAME[0]:-msg} [options...] [--] [quoted text...]

   - | --stdin        Read from stdin.
  -1 | --stdout       Send text to stdout.
  -2 | --stderr       Send text to stderr.
  -n | --no-newline   Print with no newline.
  -p | --spam         Print with MSG_SPAM_COLOR color and level 5.
  -d | --debug        Print with MSG_DEBUG_COLOR color and level 10.
  -v | --verbose      Print with MSG_VERBOSE_COLOR color and level 15.
  -i | --info         Print with MSG_INFO_COLOR color and level 20.
  -t | --notice       Print with MSG_NOTICE_COLOR color and level 25.
  -w | --warning      Print with MSG_WARNING_COLOR color and level 30.
  -s | --success      Print with MSG_SUCCESS_COLOR color and level 35.
  -e | --error        Print with MSG_ERROR_COLOR color and level 40.
  -c | --critical     Print with MSG_CRITICAL_COLOR color and level 50.
  -h | --help         Print usage.
  --                  End option parsing.

  Overide the following by exporting it.
  MSG_SPAM_COLOR, MSG_DEBUG_COLOR, MSG_VERBOSE_COLOR, MSG_INFO_COLOR, MSG_NOTICE_COLOR,
  MSG_WARNING_COLOR, MSG_SUCCESS_COLOR, MSG_ERROR_COLOR, MSG_CRITICAL_COLOR,
  MSG_FILE_DESCRIPTOR, MSG_LOG_LEVEL_LIMIT"

  local file_descriptor=${MSG_FILE_DESCRIPTOR:-2}
  local log_level=${MSG_LOG_LEVEL:-20}
  local log_level_limit=${MSG_LOG_LEVEL_LIMIT:-20}
  local color=${MSG_DEFAULT_COLOR:-${reset}}
  local newline='\n'
  local text_source="arg"
  while [[ "${1}" =~ ^- && "${1}" != "--" ]]; do
    case ${1} in
    - | --stdin) text_source="stdin" ;;
    -1 | --stdout) file_descriptor=1 ;;
    -2 | --stderr) file_descriptor=2 ;;
    -n | --no-newline) newline='' ;;
    -p | --spam) log_level=5 && color=${MSG_SPAM_COLOR:-${color_cyan}} ;;
    -d | --debug) log_level=10 && color=${MSG_DEBUG_COLOR:-${color_green}} ;;
    -v | --verbose) log_level=15 && color=${MSG_VERBOSE_COLOR:-${color_blue}} ;;
    -i | --info) log_level=20 && color=${MSG_INFO_COLOR:-${color_white}} ;;
    -t | --notice) log_level=25 && color=${MSG_NOTICE_COLOR:-${color_purple_light}} ;;
    -w | --warning) log_level=30 && color=${MSG_WARNING_COLOR:-${color_yellow}} ;;
    -s | --success) log_level=35 && color=${MSG_SUCCESS_COLOR:-${color_green_light}} ;;
    -e | --error) log_level=40 && color=${MSG_ERROR_COLOR:-${color_red}} ;;
    -c | --critical) log_level=50 && color=${MSG_CRITICAL_COLOR:-${color_red_light}} ;;
    -h | --help) echo "${usage}" && return 0 ;;
    *) echo ;;
    esac
    shift
  done
  [[ "${1}" == '--' ]] && shift

  if [ "${log_level}" -ge "${log_level_limit}" ]; then
    if [ "${text_source}" == "stdin" ]; then
      while read -r data; do
        [ ${file_descriptor} -eq 1 ] && printf "${color}%s\033[0m${newline}" "${data}"
        [ ${file_descriptor} -eq 2 ] && printf "${color}%s\033[0m${newline}" "${data}" 1>&2
      done
      return 0
    else
      [ ${file_descriptor} -eq 1 ] && printf "${color}%s\033[0m${newline}" "$*" && return 0
      [ ${file_descriptor} -eq 2 ] && printf "${color}%s\033[0m${newline}" "$*" 1>&2 && return 0
    fi
  fi
  return 0
}

msg "${@}"
