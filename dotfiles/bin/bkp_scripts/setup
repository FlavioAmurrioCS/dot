#!/usr/bin/env bash

# shellcheck source=./__script_utilities.sh
SCRIPT_HOME="$(dirname "$(cd "$(dirname "${0}")" >/dev/null 2>&1 && pwd -P)")/scripts" &&
  [ -f "${SCRIPT_HOME}/__script_utilities.sh" ] &&
  source "${SCRIPT_HOME}/__script_utilities.sh"

yum_repos=(

)

yum_packages=(
  deltarpm
  @development
  docker-ce
  graphviz-devel
  nano
  nc
  python3-pip
  python3-devel
  telnet
  tree
  unzip
  venv-ansible-2.8.5
  venv-ent-ansible-2.8.5
  venv-ent-ansible-2.9.5
  vim
  wget
  xauth
  zsh
  intellij.x86_64
  nmap
  vault
  "java-11-openjdk*"
  "java-1.8.0-openjdk*"
  "--exclude=java-*-debug"
)

pip_packages=(
  pip
  autopep8
  bpython
  flake8-mypy
  pipenv
  pbr
  httpie
)

case "$(uname -s)" in
*Darwin*)
  # =================================== Darwin ===================================
  user="${USER}"
  home="${HOME}"
  {
    bnr "Darwin: $(date)"
    VSCODE_HOME="${home}/Library/Application Support/Code/User"
    mkdir -p "${VSCODE_HOME}"
    mkdir -p ~/.local/bin
    command -v code >/dev/null 2>&1 || ln -sfn "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" ~/.local/bin/code
    [ ! -d "${VSCODE_HOME}/snippets" ] ||
      [ "$(find "${VSCODE_HOME}/snippets" -follow -name "*.json" | wc -l | sed -e 's/^[ \t]*//')" -eq 0 ] &&
      ln -sfn "${home}/.dot/vscode/snippets" "${VSCODE_HOME}/"
    [ ! -f "${VSCODE_HOME}/keybindings.json" ] &&
      ln -sfn "${home}/.dot/vscode/keybindings.json" "${VSCODE_HOME}/"
    # [ ! -f "${VSCODE_HOME}/settings.json" ] &&
    #   ln -sfn "${home}/.dot/vscode/settings.json" "${VSCODE_HOME}/"
    [ ! -d "${home}/.java_home" ] &&
      find /Library/Java -maxdepth 6 -type f -name javac -perm +111 2>/dev/null | head -n 1 | sed 's|/bin.*||' | xargs -I {} ln -sfn {} "${home}/.java_home"

    bnr "Installing extensions locally"
    c --local-development --installExtensions

    bnr "Cloning Coding Standars Locally"
    __localGitClone git@BLANK:Standards/coding-standards.git >/dev/null 2>&1

    VDE_HOST="${user}.BLANK"
    host_info "${VDE_HOST}" && {
      bnr "VDE Basic Setup"
      remoteDotUpdate "${VDE_HOST}"
      bnr "Cloning Coding Standars on VDE"
      __remoteGitClone "${VDE_HOST}" git@BLANK:Standards/coding-standards.git >/dev/null 2>&1
      bnr "Installing extensions on VDE"
      c --installExtensions -h "${VDE_HOST}"
    }

    VDI_HOST="${user}.BLANK.com"
    host_info "${VDI_HOST}" && {
      bnr "VDI Basic Setup"
      remoteDotUpdate "${VDI_HOST}"
      bnr "Cloning Coding Standars on VDI"
      __remoteGitClone "${VDI_HOST}" git@BLANK:Standards/coding-standards.git >/dev/null 2>&1
      bnr "Installing extensions on VDI"
      c --installExtensions -h "${VDI_HOST}"
    }

    command -v python3 >/dev/null 2>&1 &&
      [ ! -f "${home}/.local/bin/bpython" ] &&
      bnr "INSTALL BASED PYTHON PACKAGES" &&
      python3 -m pip install -U "${pip_packages[@]}" virtualenvwrapper --user
    log_warning "NOTE: Fork this repo to setup cloud-init for VDE https://BLANK/famurriomoya/vdi-cloud-init"
  } 2>&1 | tee "${home}/setup.log"
  ;;
*Linux*)
  # =================================== Linux ====================================
  if [ "$(whoami)" == "root" ]; then
    if hostname | grep -qi "vdi"; then
      user="$(hostname | cut -d"-" -f2 | cut -d"." -f1)"
    elif [[ -z "${1}" ]]; then
      echo "If running as root and not vde/vdi, pass in user as argument."
      exit 1
    else
      user="${1}"
    fi
  else
    user="$(whoami)"
  fi
  home="/home/${user}"

  # TOMCAT_VERSION=9.0.37
  # wget "https://BLANK/repo/org/apache/tomcat/tomcat/${TOMCAT_VERSION}/tomcat-${TOMCAT_VERSION}.tar.gz"

  # CREATE DIRECTORIES
  dir_list=(
    /app
    "${home}/.virtualenvs"
    "${home}/.ssh"
    "${home}/.nx/config"
    "${home}/.nx"
    "${home}/.sw"
  )
  sudo mkdir -p "${dir_list[@]}"
  sudo chown -R "${user}:${user}" "${dir_list[@]}"

  # CREATE FILES
  file_list=(
    "${home}/.localrc"
    "${home}/.gitconfig.local"
    "${home}/setup.log"
    "${home}/.ssh/config"
  )
  touch "${file_list[@]}"
  sudo chown -R "${user}:${user}" "${file_list[@]}"

  hostname | grep -qi "vdi" &&
    [ ! -f "${home}/.nx/config/authorized.crt" ] &&
    mkdir -p "${home}/.nx/config" &&
    sss_ssh_authorizedkeys "${user}" >"${home}/.nx/config/authorized.crt" &&
    sudo chown -R "${user}:${user}" "${home}/.nx" &&
    sudo chmod 600 "${home}/.nx/config/authorized.crt"

  {
    bnr "Linux"
    bnr "User: ${user}"
    bnr "Date: $(date)"
    bnr "Hostname: $(hostname)"

    [ -d /app ] && echo "/app -d is a directory !"
    [ -f /app ] && echo "/app -f exists and is a regular file"
    [ -e /app ] && echo "/app -e exists regardless of type"
    [ -L /app ] && echo "/app -L exists and is a symbolic link (the linked file may or may not exist) !"
    file /app

    bnr "List of repo files"
    ls /etc/yum.repos.d/

    # # TODO: Check if /app is a directory instead of a symlink
    # /app doesnt seem to be mounter
    # mkdir -p "/home/${user}/.app"
    # sudo ln -sfn "$(readlink -f "/home/${user}/.app")" /app
    bnr "Add Yum Repos"
    addRepo "${yum_repos[@]}"

    [ -f /etc/yum.repos.d/hipchat.repo ] &&
      sudo rm -rf /etc/yum.repos.d/hipchat.repo

    sudo yum clean all

    bnr "INSTALL YUM PACKAGES"
    sudo yum install -y "deltarpm"
    sudo yum install -y "${yum_packages[@]}"

    command git --version | grep -q "git version 1" &&
      bnr "INSTALL NEW GIT" &&
      sudo yum -y remove "$(rpm -qa | grep ^git)" &&
      sudo yum install -y git.x86_64

    # Installing from url because CentOS is having issues finding this.
    ! command tmux -V | grep -q "tmux 3" &&
      bnr "INSTALL NEW TMUX" &&
      sudo yum -y remove "$(rpm -qa | grep ^tmux)" &&
      installRpmFromUrl "https://BLANK/yum-provops-local/RHEL-7-x86_64/tmux-3.0a-1.el7.x86_64.rpm" &&
      [ -x "/usr/local/bin/tmux" ] &&
      sudo mv /usr/local/bin/tmux /usr/local/bin/old.tmux

    # NOTE: Chrome install a repo file which fails on vde. Use Firefox instead.
    # ! command -v google-chrome &&
    #   bnr "INSTALL CHROME" &&
    #   installRpmFromUrl "https://BLANK/google/chrome/google-chrome-stable-81.0.4044.92-1.x86_64.rpm" &&
    #   sudo rm -rf /etc/yum.repos.d/google*

    bnr "SETTINGN UP DOCKER"
    sudo systemctl stop firewalld
    sudo systemctl disable firewalld
    sudo groupadd docker
    sudo systemctl enable docker

    ! getent group docker | grep -q "${user}" &&
      sudo usermod -a -G docker "${user}" &&
      hostname | grep -qi "vdi" &&
      sudo systemctl restart nxserver
    sudo systemctl restart docker

    ln -sfn /app/venv/* "${home}/.virtualenvs/"

    [ ! -d "${home}/.java_home" ] &&
      find /usr/lib/jvm -maxdepth 6 -type f -executable -name javac 2>/dev/null | sort | head -n 1 | sed 's|/bin.*||' | xargs -I {} ln -sfn {} "${home}/.java_home"

    # https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc
    ! sudo grep -q "fs.inotify.max_user_watches=524288" /etc/sysctl.conf &&
      echo "fs.inotify.max_user_watches=524288" | sudo tee -a /etc/sysctl.conf &&
      sudo sysctl -p

    [ ! -f "${home}/.local/bin/bpython" ] &&
      bnr "INSTALL BASED PYTHON PACKAGES" &&
      sudo runuser -l "${user}" -c "\
        python3 -m pip install -U ${pip_packages[*]} --user
        python3 -m pip install -U virtualenvwrapper --user"
  } 2>&1 | tee "${home}/setup.log"
  ;;
*)
  exit 1
  ;;
esac

local_gitconfig="\
[user]
  name = ${user}
  email = ${user}@BLANK.com
"
! grep -q "email = ${user}@BLANK.com" "${home}/.gitconfig.local" &&
  echo "${local_gitconfig}" >"${home}/.gitconfig.local"
touch "${home}/.localrc"

[ -f "${home}/.dotrc" ] && cat "${home}/.dotrc" >>"${home}/.localrc" && rm "${home}/.dotrc"

bnr "SETUP DONE"
