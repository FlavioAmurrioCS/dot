#!/usr/bin/env bash
# shellcheck disable=SC2034

# Check for HOMEBREW INSTALLED BASH
# NOTE: We always want bash
echo "${0}" | grep -q zsh &&
  SHELL="$(which bash)" &&
  RUNNING_SHELL="bash" &&
  export SHELL RUNNING_SHELL &&
  exec env bash

if [ "${BASH_SOURCE[0]}" == "$0" ]; then echo "THIS FILE IS NOT MEANT TO BE EXECUTED!!!" && exit 1; fi

RUNNING_SHELL="${RUNNING_SHELL:="$(basename "${SHELL}")"}"
RUNNING_OS="${RUNNING_OS:="$(uname -s)"}"
DOT_HOME=${DOT_HOME:="$(dirname "$(python -c "import os; print(os.path.realpath('${BASH_SOURCE[0]}'))")")"}

function sourceIt() {
  if [ -z "${1}" ]; then
    builtin source "${HOME}/.bashrc"
  else
    [ -f "${1}" ] && builtin source "${@}"
  fi
}

function addToPath() {
  if [[ -n "${1}" && -d "${1}" && ! "${PATH}" == *"${1}"* ]]; then
    export PATH="${1}${PATH:+:${PATH}}"
  fi
}

case "${RUNNING_OS}" in
Darwin)
  ssh-add -l >/dev/null 2>&1 || ssh-add

  export APPLICATION_DIR="${HOME}/Applications"
  export HOMEBREW_HOME="${APPLICATION_DIR}/brew"
  export HOMEBREW_PREFIX="${HOMEBREW_HOME}"
  export HOMEBREW_CASK_OPTS="--appdir=${APPLICATION_DIR}"

  addToPath "${HOMEBREW_HOME}/bin"
  addToPath "${DOT_HOME}/bin/darwin"

  alias showhidden='defaults write com.apple.Finder AppleShowAllFiles true; killall Finder'
  # alias jira='git symbolic-ref -q HEAD | rev | cut -d/ -f1 | rev | grep -oE "^[A-Z]{2,}-[0-9]+" | xargs -I {} open "https://jira.com/jira/browse/{}"'
  # alias repo='git remote -v | grep -m 1 -oE "github.com.*.git" | tr ":" "/" | xargs -I {} open "https://{}"'
  # alias pr='open "https://$(git remote -v | grep -m 1 -oE "github.com:[A-Za-z\-]+/[A-Za-z\-]+" | tr ":" "/")/pull/new/$(git branch | grep "*" | cut -d " " -f2)"'

  # export NVM_DIR="${HOME}/.nvm"
  # [ -s "${HOMEBREW_HOME}/opt/nvm/nvm.sh" ] &&
  #     . "${HOMEBREW_HOME}/opt/nvm/nvm.sh" # This loads nvm
  # [ -s "${HOMEBREW_HOME}/opt/nvm/etc/bash_completion.d/nvm" ] &&
  #     . "${HOMEBREW_HOME}/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion
  ;;
Linux)
  addToPath "${DOT_HOME}/bin/linux"
  # =================================== vscode ===================================
  ! command -v code >/dev/null 2>&1 &&
    function code() {
      ! nc -z localhost "${REMOTE_VSCODE_PORT:=1337}" >/dev/null 2>&1 &&
        echo "Open VsCode on this host to use this tool from external terminal" &&
        return 1
      readlink -f "${1}" | nc localhost "${REMOTE_VSCODE_PORT}"
    }

  if [ "${TERM_PROGRAM}" == vscode ]; then
    function ___codeActivator() {
      code_path="$(command -v code 2>/dev/null)"
      while read -r data; do
        echo "${data}" && "${code_path}" "${data}"
      done
    }

    ! nc -z localhost "${REMOTE_VSCODE_PORT:=1337}" && {
      nc -k -l "${REMOTE_VSCODE_PORT:=1337}" | ___codeActivator >/dev/null 2>&1 &
    }
  fi
  # alias jira='git symbolic-ref -q HEAD | rev | cut -d/ -f1 | rev | grep -oE "^[A-Z]{2,}-[0-9]{1,}" | xargs -I {} echo "https://jira.com/jira/browse/{}"'
  # alias repo='git remote -v | grep -m 1 -oE "github.com.*.git" | tr ":" "/" | xargs -I {} echo "https://{}"'
  # alias pr='echo "https://$(git remote -v | grep -m 1 -oE "github.com:[A-Za-z\-]+/[A-Za-z\-]+" | tr ":" "/")/pull/new/$(git branch | grep "*" | cut -d " " -f2)"'
  # cat "${HOME}/.dot/vscodeModels/generated_models.json" >"${HOME}/.dot/vscodeModels/models.json"
  # [ ! -d "${HOME}/.java_home" ] &&
  #   find /usr/lib/jvm -maxdepth 6 -type f -executable -name javac 2>/dev/null | sort | head -n 1 | sed 's|/bin.*||' | xargs -I {} ln -sfn {} "${HOME}/.java_home"
  ;;
*)
  echo "${RUNNING_OS} is not configured." >&2
  ;;
esac

addToPath "${HOME}/.local/bin"
addToPath "${DOT_HOME}/bin/scripts"

which bb >/dev/null 2>&1 && eval "$(bb autocomplete)"

case "${RUNNING_SHELL}" in
zsh)
  export ZSH_DISABLE_COMPFIX="true"
  export ZSH="${HOME}/.oh-my-zsh"
  ZSH_THEME="af-magic"
  plugins=(
    git
  )
  sourceIt "${ZSH}/oh-my-zsh.sh"
  autoload -U colors && colors # Load colors
  # shellcheck disable=SC2154,1087
  PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "
  ;;
bash)
  export BASH_SILENCE_DEPRECATION_WARNING=1

  # ================================== history ===================================
  # https://unix.stackexchange.com/questions/1288/preserve-bash-history-in-multiple-terminal-windows
  export HISTSIZE=9000
  export HISTFILESIZE="${HISTSIZE}"
  export HISTCONTROL=ignorespace:ignoredups

  _bash_history_sync() {
    builtin history -a         #1
    HISTFILESIZE="${HISTSIZE}" #2
    builtin history -c         #3
    builtin history -r         #4
  }

  history() { #5
    _bash_history_sync
    builtin history "$@"
  }
  PROMPT_COMMAND=_bash_history_sync
  ## reedit a history substitution line if it failed
  shopt -s histreedit
  ## edit a recalled history line before executing
  shopt -s histverify

  shopt -s extglob

  [[ $- == *i* ]] &&
    bind '"\e[A": history-search-backward' &&
    bind '"\e[B": history-search-forward'

  # https://gist.github.com/vratiu/9780109
  # __TPUT_BOLD="$(tput bold)"
  # __TPUT_BLACK="${__TPUT_BOLD}$(tput setaf 8)"
  # __TPUT_RED="${__TPUT_BOLD}$(tput setaf 9)"
  # __TPUT_GREEN="${__TPUT_BOLD}$(tput setaf 10)"
  # __TPUT_YELLOW="${__TPUT_BOLD}$(tput setaf 11)"
  # __TPUT_BLUE="${__TPUT_BOLD}$(tput setaf 12)"
  # __TPUT_MAGENTA="${__TPUT_BOLD}$(tput setaf 13)"
  # __TPUT_CYAN="${__TPUT_BOLD}$(tput setaf 14)"
  # __TPUT_WHITE="${__TPUT_BOLD}$(tput setaf 15)"
  # __TPUT_RESET=$(tput sgr0)
  __TPUT_BOLD="\e[1m"
  __TPUT_BLACK="\[\e[1;90m\]"
  __TPUT_RED="\[\e[1;91m\]"
  __TPUT_GREEN="\[\e[1;92m\]"
  __TPUT_YELLOW="\[\e[1;93m\]"
  __TPUT_BLUE="\[\e[1;94m\]"
  __TPUT_MAGENTA="\[\e[1;95m\]"
  __TPUT_CYAN="\[\e[1;96m\]"
  __TPUT_WHITE="\[\e[1;97m\]"
  __TPUT_RESET="\e[0m"
  __PS1_BOLD="\[${__TPUT_BOLD}\]"
  __PS1_BLACK="\[${__TPUT_BLACK}\]"
  __PS1_RED="\[${__TPUT_RED}\]"
  __PS1_GREEN="\[${__TPUT_GREEN}\]"
  __PS1_YELLOW="\[${__TPUT_YELLOW}\]"
  __PS1_BLUE="\[${__TPUT_BLUE}\]"
  __PS1_MAGENTA="\[${__TPUT_MAGENTA}\]"
  __PS1_CYAN="\[${__TPUT_CYAN}\]"
  __PS1_WHITE="\[${__TPUT_WHITE}\]"
  __PS1_RESET="\[${__TPUT_RESET}\]"
  __PS1_USERNAME="${__PS1_YELLOW}\u"
  __PS1_AT="${__PS1_GREEN}@"
  __PS1_HOSTNAME="${__PS1_BLUE}\${MACHINE_NAME:-\h}"
  __PS1_WORKSPACE="${__TPUT_MAGENTA}\w"
  __PS1_PROMPT="${__PS1_RESET}${__PS1_BOLD}\n$ ${__PS1_RESET}"
  __PS1_WRAPPER_START="${__PS1_RESET}\n${__PS1_RED}["
  __PS1_WRAPPER_END="${__PS1_RED}]"
  # shellcheck disable=SC2016
  __PS1_GIT='$(
        BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        [ "${BRANCH}" = HEAD ] && BRANCH=$(git describe --contains --all HEAD 2>/dev/null)
        [ "${BRANCH}" != "" ] && {
            echo -n "'"${__TPUT_CYAN}"'['"${__TPUT_RED}"'${BRANCH}"
            git ls-files --error-unmatch -m --directory --no-empty-directory -o --exclude-standard ":/*" >/dev/null 2>&1 && echo -n " '"${__TPUT_YELLOW}âœ—"'"
            echo -n "'"${__TPUT_CYAN}"']"
        }
    )'
  export PS1="${__PS1_WRAPPER_START}${__PS1_USERNAME}${__PS1_AT}${__PS1_HOSTNAME} ${__PS1_WORKSPACE}${__PS1_WRAPPER_END}${__PS1_GIT}${__PS1_PROMPT}"
  unset __TPUT_BOLD __TPUT_BLACK __TPUT_RED __TPUT_GREEN __TPUT_YELLOW \
    __TPUT_BLUE __TPUT_MAGENTA __TPUT_CYAN __TPUT_WHITE __PS1_BLACK __PS1_RED \
    __PS1_GREEN __PS1_YELLOW __PS1_BLUE __PS1_MAGENTA __PS1_CYAN __PS1_WHITE \
    __PS1_USERNAME __PS1_AT __PS1_HOSTNAME __PS1_WORKSPACE __PS1_PROMPT \
    __PS1_WRAPPER_START __PS1_WRAPPER_END __PS1_GIT __TPUT_RESET __PS1_BOLD __PS1_RESET
  ;;
*)
  echo "${RUNNING_SHELL} is not configured." >&2
  ;;
esac

# ==================================== fzf =====================================
if [[ $- == *i* ]] && which fzf >/dev/null 2>&1; then
  sourceIt "${DOT_HOME}/fzf_scripts/completion.${RUNNING_SHELL}" 2>/dev/null
  sourceIt "${DOT_HOME}/fzf_scripts/key-bindings.${RUNNING_SHELL}" 2>/dev/null
fi

# ==================================== ssh =====================================
#SSH SCP Aliases
# if [ -x /usr/local/bin/kinit ]; then
#   (/usr/local/bin/kswitch -p "${USER}@BLANK" 2>/dev/null &)
#   (,kcheck.py &)
#   alias ssh='/usr/local/bin/kswitch -p ${USER}@BLANK 2> /dev/null; /usr/bin/ssh'
#   alias scp='/usr/local/bin/kswitch -p ${USER}@BLANK 2> /dev/null; /usr/bin/scp'
# fi

# =================================== shell ====================================
export CLICOLOR="1"
export LSCOLORS="GxFxCxDxBxegedabagaced"
export TERM=xterm-256color
export MORE='-R -i'
export LESS="${MORE}"
export LESS_TERMCAP_mb=$'\e[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\e[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\e[0m'           # end mode
export LESS_TERMCAP_se=$'\e[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\e[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\e[0m'           # end underline
export LESS_TERMCAP_us=$'\e[04;38;5;146m' # begin underline
# export GREP_OPTIONS='--color=auto --line-buffered'
function grep() {
  command grep --color=auto --line-buffered "${@}"
}

# TODO: INCLUDE IT HERE . /Users/famurriomoya/dev/base16-fzf/bash/base16-bright.config
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --exact"
export VISUAL="/usr/bin/vim"
export EDITOR="${VISUAL:-/usr/bin/vim}"

alias ls='ls -GFhtr'
alias ll='ls -ltr'
# alias di='echo dotenv > .envrc && touch .env && direnv allow'
alias myip='dig TXT +short o-o.myaddr.l.google.com @ns1.google.com'

# command -v code-insiders >/dev/null 2>&1 &&
#   ! command -v code >/dev/null 2>&1 &&
#   alias code="code-insiders"

# alias cr='$(grep "^code.*--f" $HISTFILE | grep -v -e "|" -e "code$" -e "code $" | sort -u | fzf)'

alias myconfig='git "--git-dir=${HOME}/.cfg/" "--work-tree=${HOME}"'
# command -v code >/dev/null 2>&1 &&
#   alias myconfigcode='code ${DOT_HOME}'
alias tmux='{ tmux has-session >/dev/null 2>&1 && tmux a; } || tmux'

# alias __list_local_project='find "${HOME}/projects" -maxdepth 5 -type d -name .git | sed -e "s|${HOME}/projects/||g" -e "s|/.git||g" | fzf'
# # shellcheck disable=SC2154
# alias c='project="$(__list_local_project)" && code "${HOME}/projects/${project}"'
# alias p='project="$(__list_local_project)" && cd "${HOME}/projects/${project}"'

alias noproxy='port 9999 -k; unset {{ALL,HTTP,HTTPS}_PROXY,{http,https}_proxy}'

# alias nonprod='rmux nonprod'
# alias bastion='rmux bastion'
# alias osjump='rmux osjump'
# alias auto='rmux auto'
# alias vde='rmux vde'
alias pprint='echo -e $(pbpaste | perl -MHTML::Entities -pe '"'"'decode_entities(${_});'"'"')'

# ================================== gitalias ==================================
alias push='git push 2>/dev/null || $(git push 2>&1 | grep "git push")'
alias checkout='git branch -a | cut -c 3- | grep -v HEAD | sed "s|remotes/origin/||" | sort -u | fzf -0 | xargs -I {} git checkout {}'
# alias git_tags='git describe --tags $(git rev-list --tags --max-count=1)'
# alias git_reset='git reset HEAD --hard'
# alias git_clean='git clean -fd'
# alias git_clean_branch='git branch | grep -v "*" | cut -c 3- | xargs git branch -D'
# alias git_history='git log --full-history --'
# alias _get_log_files='find . -type f | grep -e ".log" -e ".err"'
# alias _get_files='find . -type f | grep -v -e "/bin/" -e "/build/" -e "/.git/" -e "/.idea/" -e ".jar$"'
# alias p='dest=$(find ~/projects -maxdepth 1 -type d | fzf) && cd ${dest}'
# alias cdf='dest=$(find . -type d | fzf) && cd ${dest}'
# alias t='dest=$(_get_log_files | fzf) && tail -f ${dest}'
# alias v='dest=$(_get_files | fzf) && vim ${dest}'
# alias cf='dest=$(_get_files | fzf) && code ${dest}'
# alias gf='gw tasks --all | grep -oiE "[a-z]+:[a-z:]+" | auniq | fzf | xargs -I{} bash -c "echo gw {}; gw {}"'
# alias auniq="awk '!a["'$0'"]++'"
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'

# export ANSIBLE_VAULT_PASSWORD_FILE="${HOME}/."
# =================================== python ===================================
export WORKON_HOME="${HOME}/.virtualenvs"
VIRTUALENVWRAPPER_PYTHON=$(command -v python3 || command -v python) &&
  export VIRTUALENVWRAPPER_PYTHON
export PYTHONUSERBASE="${HOME}/.local"
# export PIP_INDEX_URL="https://BLANK/pypi-virtual/simple"
export WORKON_HOME="${HOME}/.virtualenvs"
export PIPENV_VENV_IN_PROJECT=1
export POETRY_VIRTUALENVS_IN_PROJECT=true

# ==================================== node ====================================
# export NVM_NODEJS_ORG_MIRROR="https://BLANK/nodejs"

# ==================================== java ====================================
export JAVA_DEBUG_PORT="9009"
export JPDA_OPTS="-agentlib:jdwp=transport=dt_socket,address=${JAVA_DEBUG_PORT},server=y,suspend=n"
# export JAVA_HOME="${HOME}/.java_home"
# export CATALINA_HOME="${HOME}/.tomcat"
# alias tomcat_start='cd "${CATALINA_HOME}" && "${CATALINA_HOME}/bin/catalina.sh" jpda start && cd -'
# alias tomcat_stop='cd "${CATALINA_HOME}" && "${CATALINA_HOME}/bin/catalina.sh" jpda stop && cd -'
# alias tomcat_tail='tail -f "${CATALINA_HOME}/logs/catalina.out"'
# alias tomcat_kill='ps aux | grep tomcat | grep -v -e tail -e grep | awk '\''{print $2}'\'' | xargs -I {} kill -9 {}'
alias mux_kill='ps aux | grep ssh | grep "\[mux" | awk '\''{print $2}'\'' | xargs kill -9'
# alias cs_reset='mux_kill; ssh vde "ukill gradle -k; ukill code-server -k"'

# [ -n "${CATALINA_HOME}" ] &&
#   alias tomcat='cd ${CATALINA_HOME} && ${CATALINA_HOME}/bin/catalina.sh jpda'
# =================================== remote ===================================
# export VDE_HOST="BLANK"
# export DEV_HOST="${VDE_HOST}"

export REMOTE_VSCODE_PORT="1337"
# export MSG_LOG_LEVEL_LIMIT="0"

# { [ ! -d /tmp/symlinks ] && ln -sfn "${HOME}/.dot/symlinks" "/tmp/"; } >/dev/null 2>&1

# ==================================== tmux ====================================
# TODO: Move inside tmux.conf
if [ -n "${TMUX}" ]; then
  bb rmux --help
  alias fibv='tmux-layout-dwindle brvs'
  alias fibh='tmux-layout-dwindle brhs'
  function tmw() {
    # TODO: Use this to setup initial workspace
    tmux split-window -dh "$*"
  }
  function exit() {
    [ "${1}" == "-f" ] && builtin exit
    echo "Exit is disabled while in tmux. Use 'exit -f' to exit."
  }
fi

function activate_proxy() {
  local proxy_host=${1:-${USER}.BLANK}
  lsof -i ":9999" | grep LISTEN | awk '{print $2}' | sort -u | xargs kill -9 2>/dev/null
  ssh -N -f -K -D 9999 -C "${proxy_host}" 2>/dev/null &&
    export ALL_PROXY=socks5://localhost:9999 && msg --success "Using ${proxy_host} as proxy."
}
# nc -z localhost 9999 >/dev/null 2>&1 && export ALL_PROXY=socks5://localhost:9999

# function tunnel_docker() {
#   local proxy_host=${1:-${USER}.BLANK}

#   ssh -N -f -L localhost:23750:/var/run/docker.sock "${proxy_host}" &&
#     export DOCKER_HOST="tcp://localhost:23750"
# }

# nc -z localhost 23750 >/dev/null 2>&1 && export DOCKER_HOST="tcp://localhost:23750"

# function flask_run() {
#   FLASK_APP=$1 FLASK_DEBUG=1 python -m flask run
# }

# export proxy="http://10.178.62.4:3128"
# curl -x "${proxy}" -s -m 2 https://www.google.com > /dev/null && export {{ALL,HTTP,HTTPS}_PROXY,{http,https}_proxy}="${proxy}"

# function jenkinsValidate() {
#   local jenkins_file="${1}"
#   [ ! -f "${jenkins_file}" ] && echo "${jenkins_file} does not exist!" && return 1
#   local jenkins_url="${JENKINS_URL:-BLANK}"
#   local username="${JENKINS_USER:-${USER}}"
#   local password
#   password="${JENKINS_PASSWORD:-$(read -r -s -p "Enter Jenkins' password: " temp && echo "${temp}")}" || return 1
#   local jenkins_crumb
#   jenkins_crumb=${JENKINS_CRUMB:-$(curl --silent --user "${username}:${password}" "${jenkins_url}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)")}"" || return 1
#   export JENKINS_CRUMB="${jenkins_crumb}"
#   export JENKINS_PASSWORD="${password}"
#   echo
#   curl \
#     --user "${username}:${password}" \
#     -X POST \
#     -H "${jenkins_crumb}" \
#     -F "jenkinsfile=<${jenkins_file}" \
#     "${jenkins_url}/pipeline-model-converter/validate"
# }

# function scptovde() {
#   scp -r "${1}" vde:~/scp/
# }

# function withSms() {
#   "${@}"
#   smsAlert "'${*}' has completed!"
# }

# =================================== source ===================================
# shellcheck source=/dev/null

sourceIt "${HOME}/.local/bin/virtualenvwrapper_lazy.sh"

# shellcheck source=../.localrc
sourceIt "${HOME}/.localrc"
sourceIt "${HOME}/.secretrc"

addToPath "${JAVA_HOME}/bin"
addToPath "${NODE_HOME}/bin"
